#!/usr/bin/env python
from pwn import *
import json
# touch fsignal/__init__.py
from fsignal.util import *
#import foresight # https://github.com/ALSchwalm/foresight
# https://github.com/AntonKueltz/cryptopals
# https://github.com/fx5/not_random
# https://hg.python.org/cpython/file/2.7/Lib/random.py#l692
# https://github.com/bishopfox/untwister
# https://github.com/certik/python-2.7/blob/master/Modules/_randommodule.c

HOST = 'localhost' if '--live' not in sys.argv else '18.181.0.76'

''' begin FROM service.py '''
ops = {
    'STORE': 1,
    'LIST': 2,
    'GET': 3,
}

def handle(msg):
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  #sock.connect(('localhost', 5555))
  sock.connect((HOST, 5555))
  sock.sendall(msg)
  return sock.recv(4096)

def call(type, pub, a2='\x00'):
  data = json.dumps([ops[type], pub, TO(a2)])
  return [FROM(i) for i in json.loads(handle(data))]
''' END FROM service.py '''

(pub, priv) = generateFS()

def plunge_output_buffer(p):
    for _ in range(64):
        p.sendline('')

p = process(['python', 'fsignal/service.py']) if '--live' not in sys.argv else remote('18.181.0.76', 5545)
# echo -e 'placeholder1\nplaceholder2\nplaceholder3' > flag

plunge_output_buffer(p)

r = 'Client: (\\[[0-9L, ]*\\])\nServer: (\\[[0-9L, ]*\\])'
s = p.recvregex(r)
print('s: %r' % (s,))

cpub, mpub = [eval(x) for x in re.findall(r, s)[0][0:2]]
print('cpub: %r' % (cpub,))
print('mpub: %r' % (mpub,))

listing = call('LIST', cpub)
print('listing: %r' % (listing,))

def collide_keys(pub1, pub2):
    '''
    >>> list(str(i) for i in {1: 'a', 2:'b'})
    ['1', '2']
    '''
    assert len(pub1) == len(pub2)
    d1 = dict()
    d2 = dict()
    for (i, k) in enumerate(pub1):
        d1[i] = k
    for (i, k) in enumerate(pub2):
        d2[i] = k
    for k in pub1:
        d1[k] = 0
        d2[k] = 0
    for k in pub2:
        d1[k] = 0
        d2[k] = 0
    n = len(pub1)
    assert [d1[i] for i in range(n)] == pub1
    assert [d2[i] for i in range(n)] == pub2
    storekey = lambda pub: ':'.join(str(i) for i in pub)
    assert storekey(d1) == storekey(d2)
    return d1, d2

d1, d2 = collide_keys(cpub, pub)
#print('d1: %r\bd2: %r' % (d1, d2))

#p.sendline('STORE')
#p.sendline(repr(list(d2.keys())))

#p.interactive()
