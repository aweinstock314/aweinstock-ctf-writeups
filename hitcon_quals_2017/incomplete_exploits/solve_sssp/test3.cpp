/*
typedef mersenne_twister<
    unsigned long, 32, 624, 397, 31,
    0x9908b0dful, 11, 7,
    0x9d2c5680ul, 15,
    0xefc60000ul, 18
    > mt19937;
*/
/*
// /usr/include/c++/4.9/bits/random.h
  typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;
*/

#define _UIntType unsigned long
#define __w 32
#define __n 624
#define __m 397
#define __r 31
#define __a 0x9908b0dful
#define __u 11
#define __d 0xffffffffUL
#define __s 7
#define __b 0x9d2c5680ul
#define __t 15
#define __c 0xefc60000UL
#define __l 17
#define __f 1812433253UL

/*
a = 'typedef mersenne_twister_engine< uint_fast32_t, 32, 624, 397, 31, 0x9908b0dfUL, 11, 0xffffffffUL, 7, 0x9d2c5680UL, 15, 0xefc60000UL, 18, 1812433253UL> mt19937;'
b = 'template<typename _UIntType, size_t __w, size_t __n, size_t __m, size_t __r, _UIntType __a, size_t __u, _UIntType __d, size_t __s, _UIntType __b, size_t __t, _UIntType __c, size_t __l, _UIntType __f>'
f = lambda x:len(filter(lambda x:x==',',x))
print(f(a), f(b))
print(list(zip(a.split(','), b.split(','))))
*/
/*
>>> print(f(a), f(b))
(13, 13)
>>> print(list(zip(a.split(','), b.split(','))))
[('typedef mersenne_twister_engine< uint_fast32_t', 'template<typename _UIntType'), (' 32', ' size_t __w'), (' 624', ' size_t __n'), (' 397', ' size_t __m'), (' 31', ' size_t __r'), (' 0x9908b0dfUL', ' _UIntType __a'), (' 11', ' size_t __u'), (' 0xffffffffUL', ' _UIntType __d'), (' 7', ' size_t __s'), (' 0x9d2c5680UL', ' _UIntType __b'), (' 15', ' size_t __t'), (' 0xefc60000UL', ' _UIntType __c'), (' 18', ' size_t __l'), (' 1812433253UL> mt19937;', ' _UIntType __f>')]
*/

/*
// /usr/include/c++/4.8/bits/random.tcc
  template<typename _UIntType,
	   size_t __w, size_t __n, size_t __m, size_t __r,
	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
			      __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
	const _UIntType __upper_mask = (~_UIntType()) << __r;
	const size_t __k = (__w + 31) / 32;
	uint_least32_t __arr[__n * __k];
	__q.generate(__arr + 0, __arr + __n * __k);

	bool __zero = true;
	for (size_t __i = 0; __i < state_size; ++__i)
	  {
	    _UIntType __factor = 1u;
	    _UIntType __sum = 0u;
	    for (size_t __j = 0; __j < __k; ++__j)
	      {
		__sum += __arr[__k * __i + __j] * __factor;
		__factor *= __detail::_Shift<_UIntType, 32>::__value;
	      }
	    _M_x[__i] = __detail::__mod<_UIntType,
	      __detail::_Shift<_UIntType, __w>::__value>(__sum);

	    if (__zero)
	      {
		if (__i == 0)
		  {
		    if ((_M_x[0] & __upper_mask) != 0u)
		      __zero = false;
		  }
		else if (_M_x[__i] != 0u)
		  __zero = false;
	      }
	  }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
	_M_p = state_size;
      }
*/
  void seed(_Sseq& __q)
  {
const _UIntType __upper_mask = (~_UIntType()) << __r;
const size_t __k = (__w + 31) / 32;
uint_least32_t __arr[__n * __k];
__q.generate(__arr + 0, __arr + __n * __k);

bool __zero = true;
for (size_t __i = 0; __i < state_size; ++__i)
  {
    _UIntType __factor = 1u;
    _UIntType __sum = 0u;
    for (size_t __j = 0; __j < __k; ++__j)
      {
    __sum += __arr[__k * __i + __j] * __factor;
    __factor *= __detail::_Shift<_UIntType, 32>::__value;
      }
    _M_x[__i] = __detail::__mod<_UIntType,
      __detail::_Shift<_UIntType, __w>::__value>(__sum);

    if (__zero)
      {
    if (__i == 0)
      {
        if ((_M_x[0] & __upper_mask) != 0u)
          __zero = false;
      }
    else if (_M_x[__i] != 0u)
      __zero = false;
      }
  }
    if (__zero)
      _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
_M_p = state_size;
  }

/*
:!gcc -E test3.cpp
# 1 "test3.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "test3.cpp"
# 95 "test3.cpp"
  void seed(_Sseq& __q)
  {
const unsigned long __upper_mask = (~unsigned long()) << 31;
const size_t __k = (32 + 31) / 32;
uint_least32_t __arr[624 * __k];
__q.generate(__arr + 0, __arr + 624 * __k);

bool __zero = true;
for (size_t __i = 0; __i < state_size; ++__i)
  {
    unsigned long __factor = 1u;
    unsigned long __sum = 0u;
    for (size_t __j = 0; __j < __k; ++__j)
      {
    __sum += __arr[__k * __i + __j] * __factor;
    __factor *= __detail::_Shift<unsigned long, 32>::__value;
      }
    _M_x[__i] = __detail::__mod<unsigned long,
      __detail::_Shift<unsigned long, 32>::__value>(__sum);

    if (__zero)
      {
    if (__i == 0)
      {
        if ((_M_x[0] & __upper_mask) != 0u)
          __zero = false;
      }
    else if (_M_x[__i] != 0u)
      __zero = false;
      }
  }
    if (__zero)
      _M_x[0] = __detail::_Shift<unsigned long, 32 - 1>::__value;
_M_p = state_size;
  }
*/
